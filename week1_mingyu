# 1차 캐시

## 영속성 컨텍스트

- 영속성 컨텍스트 : 애플리케이션이 데이터베이스와 연결하여 데이터를 관리하는 가상의 저장소
- 엔티티 매니저가 영속성 컨텍스트에 엔티티를 담고 영속성 켄텍스트에 담긴 엔티티는 엔티티의 변화를 추적할 수 있다. 그래서 이런 변경사항들을  데이터베이스에 반영하게 된다.
- 간단하게 영속성 컨텍스트는 데이터베이스와 애플리케이션 간에 중간관리 역할을 하며 데이터 변경을 효율적으로 관리하도록 돕는다.
- 여러 기능들이 있지만 핵심만 이야기 해서 영속성 컨텍스트는 엔티티 상태를 관리하고 ,데이터베이스와의 불필요한 연결을 줄여 성능을 높인다.

    ![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/f0182749-df25-447d-b764-a283258c8d6c/bba3bffe-7dd7-4dfb-b4d2-47537faf5246/image.png)


## 1차 캐시

- 이 공간은 영속성 컨텍스트 내부에서 존재하는 임시 저장소로 엔티티 매니저로 조회하거나 변경하는 모든 것들이 이 저장소, 1차캐시에 저장이된다.
- 또한 이 1차 캐시는 트랜잭션 범위 내에서만 데이터를 캐싱해 두기 때문에 서로 다른 작업 단위에서는 데이터를 공유할 수 없다.

```java
EntityManager em = entityManagerFactory.createEntityManager();
em.getTransaction().begin();

Member member1 = em.find(Member.class, 1L); // 첫 번째 조회, DB에서 가져옴
Member member2 = em.find(Member.class, 1L); // 두 번째 조회, 1차 캐시에서 가져옴 (DB 조회 없음)

em.getTransaction().commit();
em.close();

```

### 그런데 만약에 2개의 find사이에 다른 곳에서 변경이 일어났다면?

- 1차 캐시는 트랜잭션 범위 내에서만 유효하며, 한 번 `find`로 가져온 엔티티는 같은 트랜잭션 내에서 변경 사항이 반영되지 않습니다.

## 2차 캐시

- 2차 캐시는 어플리케이션 전역에서 공유할 수 있는 캐시로 영속성 컨텍스트가 종료된 후에도 데이터를 어플리케이션 측에서 계속 관리를 한다.
- 서로다른 여러 사용자가 동일한 데이터를 요청할 때 데이터베이스에 접근하지 않고 빠르게 데이터를 제공한다.

## 차이

| 구분 | 1차 캐시 | 2차 캐시 |
| --- | --- | --- |
| **위치** | 영속성 컨텍스트 내부에 있음 | 애플리케이션 전체에서 공유 가능 |
| **범위** | 트랜잭션 내에서만 유효 | 여러 트랜잭션과 영속성 컨텍스트에서 공유 |
| **유지 기간** | 트랜잭션이 종료되면 초기화 | 애플리케이션이 종료될 때까지 유지 |
| **사용 목적** | 트랜잭션 내 반복 조회 성능 최적화 | 자주 조회되는 데이터의 전역 성능 최적화 |

# 테이블 전략

## 싱글 테이블 전략

싱글 테이블 전략은 상속 구조에 있는 모든 엔티티를 하나의 테이블에 저장하는 방식이다. 하나의 테이블에 상위 클래스와 하위 클래스의 모든 속성을 저장하므로 구조가 단순해지고 조회 성능이 빠른 장점이 있다.

- @Inheritance(strategy = InheritanceType.SINGLE_TABLE): 상속 전략을 싱글 테이블 방식으로 설정.
- @DiscriminatorColumn(name = "DTYPE"): 엔티티 타입을 구분하기 위한 컬럼을 지정합니다. 이 컬럼을 통해 상위 클래스인지 하위 클래스인지 구분할 수

### 예시 코드

```java

@Entity
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
@DiscriminatorColumn(name = "DTYPE")
public abstract class Product {

    @Id @GeneratedValue
    private Long id;
    private String name;
}

@Entity
@DiscriminatorValue("B")
public class Book extends Product {
    private String author;
}

@Entity
@DiscriminatorValue("M")
public class Movie extends Product {
    private String director;
}

```

이 경우 `Product`, `Book`, `Movie` 모두 `Product`라는 하나의 테이블에 저장된다. `DTYPE` 컬럼이 추가되어 각 레코드가 어떤 타입인지 구분할 수 있다.

- 장점: 조인이 필요 없으므로 조회 성능이 좋다.
- 단점: 모든 데이터를 하나의 테이블에 넣기 때문에 불필요한 NULL 값이 많아질 수 있고, 테이블이 비대해질 수 있다.

## 조인드 테이블 전략

조인드 테이블 전략은 상속 구조의 각 엔티티를 각각의 테이블에 저장하고, 조회할 때는 JOIN을 사용하여 상속 구조를 완성하는 방식이다. 상위 클래스의 공통 속성은 상위 테이블에, 하위 클래스의 속성은 각 하위 클래스 테이블에 저장한다.

- @Inheritance(strategy = InheritanceType.JOINED): 상속 전략을 조인드 테이블 방식으로 설정한다.
- @DiscriminatorColumn(name = "DTYPE"): 엔티티 타입을 구분하기 위한 컬럼을 지정하여 상속 구조를 구분한다.

### 예시 코드

```java
@Entity
@Inheritance(strategy = InheritanceType.JOINED)
@DiscriminatorColumn(name = "DTYPE")
public abstract class Product {

    @Id @GeneratedValue
    private Long id;
    private String name;
}

@Entity
public class Book extends Product {
    private String author;
}

@Entity
public class Movie extends Product {
    private String director;
}

```

이 경우, `Product`, `Book`, `Movie` 각각의 테이블이 생성된다. `Book`과 `Movie` 테이블은 `Product` 테이블과 `id`를 기준으로 조인하여 조회한다.

- 장점: 공통 속성을 상위 테이블에 저장하고, 하위 클래스의 속성은 하위 테이블에 저장하여 중복을 최소화한다.
- 단점: 조회 시에 JOIN 연산이 필요하므로, 성능이 상대적으로 떨어질 수 있다.

### 1. Product 테이블

| id | DTYPE | name |
| --- | --- | --- |
| 1 | B | Clean Code |
| 2 | M | Inception |
| 3 | B | Effective Java |
| 4 | M | The Matrix |

### 2. Book 테이블

| id | author |
| --- | --- |
| 1 | Robert C. Martin |
| 3 | Joshua Bloch |

### 1. Product 테이블

| id | DTYPE | name |
| --- | --- | --- |
| 1 | B | Clean Code |
| 2 | M | Inception |
| 3 | B | Effective Java |
| 4 | M | The Matrix |

## 테이블 퍼 클래스 전략

테이블 퍼 클래스 전략은 상위 클래스에 대한 테이블 없이, 각 하위 클래스에 상위 클래스의 모든 속성을 복사하여 테이블을 생성하는 방식이다. 따라서 각 하위 클래스는 독립적인 테이블로 존재하며, 상위 클래스의 속성도 자신의 테이블에 포함한다.

- @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS): 상속 전략을 테이블 퍼 클래스 방식으로 설정한다.

### 예시 코드

```java
@Entity
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
public abstract class Product {
    @Id @GeneratedValue
    private Long id;
    private String name;
}

@Entity
public class Book extends Product {
    private String author;
}

@Entity
public class Movie extends Product {
    private String director;
}

```

이 경우, `Book`과 `Movie`는 각각 독립적인 테이블을 가지고, `Product` 클래스의 필드인 `id`와 `name`도 각 테이블에 포함된다.

- 장점: JOIN이 필요 없으며, 각 테이블이 독립적으로 존재하므로 데이터 일관성이 좋고 성능이 빠르다.
- 단점: 중복 데이터가 많아지고, 상위 클래스의 속성이 많을 경우 테이블이 비대해질 수 있다.

# n + 1 문제

- N + 1 문제는 JPA에서 연관된 엔티티를 조회할 때 발생하는 성능 문제로, JPA가 의도치 않게 많은 쿼리를 실행하여 성능 저하를 유발하는 상황을 말한다. 이름에서 알 수 있듯이 처음 한번의 쿼리로 데이터를 조회한 후, 연관된 엔티티를 가져오기 위해 추가적으로 N번의 쿼리가 발생하는 현상이다.

## 예시 코드

```jsx
@Entity
public class Order {
    @Id @GeneratedValue
    private Long id;

    @OneToMany(mappedBy = "order")
    private List<OrderItem> orderItems;
}

@Entity
public class OrderItem {
    @Id @GeneratedValue
    private Long id;

    @ManyToOne
    @JoinColumn(name = "order_id")
    private Order order;

    private String itemName;
}

```

```jsx
public void findAllOrders() {
    List<Order> orders = em.createQuery("SELECT o FROM Order o", Order.class)
                            .getResultList();

    for (Order order : orders) {
        for (OrderItem orderItem : order.getOrderItems()) {
            System.out.println(orderItem.getItemName());
        }
    }
}

```

- 처음에 `Order` 목록을 조회한다. 이때 모든 주문 정보를 한 번에 조회하는 쿼리가 실행되며, 이 쿼리가 첫 번째 쿼리이다.
- 이후 `Order` 목록을 반복하면서 `OrderItem`에 접근할 때, 각 `Order`에 대해 `OrderItem`을 조회하기 위한 쿼리가 추가로 실행된다.
- 총 쿼리 수는 1 + N이며, N은 `Order`의 개수이다.
- 만약 Order가 1000개라면 쿼리가 1001번이 발생해버리는 문제가 발생한다.

## 해결방안

### **페치 조인(Fetch Join)**

가장 추천되는 방법은 페치 조인이다.

JPQL에서 Fetch Join을 사용하면, JPA가 한 번의 쿼리로 연관된 엔티티를 함께 가져오도록 최적화할 수다.

```java
public void findAllOrdersWithItems() {
    List<Order> orders = em.createQuery("SELECT o FROM Order o JOIN FETCH o.orderItems", Order.class)
                            .getResultList();
}

```

이 방법을 사용하면 쿼리가 한 번만 실행되며, 결과적으로 N + 1 문제가 해결된다.