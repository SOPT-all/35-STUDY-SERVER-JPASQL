### 1. **도메인 모델 패턴 (Domain Model Pattern)**

### 정의

- 비즈니스 로직을 객체 지향적으로 설계하고, 비즈니스 규칙과 데이터를 함께 포함하는 **객체(도메인 객체)**를 중심으로 시스템을 구축하는 패턴입니다.
- 각 도메인 객체는 비즈니스 개념을 표현하며, 해당 객체 안에 필요한 동작(메서드)을 포함합니다.

### 특징

1. **객체 지향 설계 중심**
    - 도메인 객체는 **상태(필드)**와 **행동(메서드)**을 결합하여 하나의 단위로 관리합니다.
    - 예: `Order` 객체는 `calculateTotalPrice`와 같은 메서드를 포함.
2. **복잡한 비즈니스 로직 처리에 적합**
    - 도메인 모델은 복잡한 비즈니스 규칙을 처리하는 데 적합하며, 로직이 여러 객체로 분리될 수 있습니다.
3. **비즈니스 규칙과 데이터 응집**
    - 데이터와 해당 데이터를 처리하는 로직이 같은 클래스 안에 존재합니다.
4. **지속성 레이어와 독립적**
    - 도메인 모델은 데이터베이스와 독립적으로 설계되며, 데이터베이스 작업은 별도의 레이어(예: 리포지토리)에서 처리됩니다.

### 장점

- 코드 재사용성과 유지보수성이 높음.
- 복잡한 비즈니스 로직을 체계적으로 표현 가능.
- 객체 간의 연관성과 계층 구조를 활용하여 현실 세계를 모델링하기 쉬움.

### 단점

- 초기 설계와 구현에 많은 시간과 노력이 필요.
- 간단한 애플리케이션에서는 과도한 설계로 느껴질 수 있음.
- 객체 간 상호작용이 많아지면 성능 최적화가 어려울 수 있음.

### 사용 예

- 전자 상거래 시스템의 `Order`, `Customer`, `Product` 같은 개념을 객체로 표현.
- 은행 시스템의 계좌(Account)와 같은 복잡한 상태와 규칙을 처리할 때.

---

### 2. **트랜잭션 스크립트 패턴 (Transaction Script Pattern)**

### 정의

- 비즈니스 로직을 데이터 흐름 중심으로 설계하며, 각 트랜잭션(작업 단위)을 독립적인 **스크립트** 형태로 구현하는 패턴입니다.
- 비즈니스 로직은 **서비스 계층**이나 **DAO**에 위치하며, 단순하고 절차적인 코드로 작성됩니다.

### 특징

1. **절차적 프로그래밍 중심**
    - 로직은 단계별로 실행되며, 별도의 객체 구조 없이 함수 또는 메서드에 집중됩니다.
2. **단순한 비즈니스 로직 처리에 적합**
    - 로직이 간단하거나 특정 작업 단위로 구성되는 경우 적합.
3. **비즈니스 로직과 데이터 분리**
    - 비즈니스 로직은 데이터와 분리되며, 데이터는 보통 DTO(Data Transfer Object)로 전달됩니다.

### 장점

- 구현이 단순하고 빠름.
- 학습 곡선이 낮아 팀 내에서 쉽게 공유 가능.
- 간단한 애플리케이션이나 프로토타이핑에 적합.

### 단점

- 로직이 여러 스크립트에 중복될 가능성이 높음.
- 코드가 비대해질 경우 유지보수가 어려워질 수 있음.
- 객체 지향적인 설계가 어려워 대규모 프로젝트에 적합하지 않음.

### 사용 예

- 단순한 CRUD 애플리케이션.
- 마이크로서비스에서 특정 도메인 로직이 독립적으로 작동하는 경우.

---

### 두 패턴 비교

| **특징** | **도메인 모델 패턴** | **트랜잭션 스크립트 패턴** |
| --- | --- | --- |
| **비즈니스 로직 위치** | 도메인 객체 내부 | 서비스 계층 또는 독립된 메서드 내부 |
| **복잡성** | 복잡한 로직을 체계적으로 관리 | 단순한 로직 중심, 직관적 설계 |
| **설계 철학** | 객체 지향 설계 | 절차적 설계 |
| **재사용성** | 로직 재사용성이 높음 | 로직 중복 가능성 높음 |
| **유지보수성** | 유지보수성 우수 | 코드가 복잡해질수록 유지보수가 어려움 |
| **적용 범위** | 복잡한 비즈니스 로직 및 도메인 모델이 필요한 경우 | 단순한 트랜잭션 단위로 작업을 처리할 경우 |

---

### 결론: 어떤 패턴을 선택할까?

- **도메인 모델 패턴**:
    - 복잡한 비즈니스 로직, 대규모 프로젝트, 도메인 중심 설계(DDD)를 원하는 경우.
- **트랜잭션 스크립트 패턴**:
    - 간단한 애플리케이션, 단순한 데이터 처리, 빠른 개발이 필요한 경우.

패턴 선택은 프로젝트 규모와 요구사항의 복잡도에 따라 달라집니다. 초기에는 트랜잭션 스크립트를 사용하고, 시스템이 커지면 도메인 모델 패턴으로 전환하는 경우도 많습니다.

# 코드

### 1. **도메인 모델 패턴 예제**

```java
import java.util.List;

public class Order {
    private List<OrderItem> items;
    private double discount;
    private double shippingFee;

    // 생성자
    public Order(List<OrderItem> items, double discount) {
        this.items = items;
        this.discount = discount;
        this.shippingFee = 0.0; // 기본 배송비 0
    }

    // 총 금액 계산
    public double calculateTotalPrice() {
        double total = items.stream()
            .mapToDouble(item -> item.getPrice() * item.getQuantity())
            .sum();
        return total - discount + shippingFee;
    }

    // 할인 적용
    public void applyDiscount(double discount) {
        this.discount = discount;
    }

    // 배송비 설정
    public void applyShippingFee(double fee) {
        this.shippingFee = fee;
    }
}

// 도메인 모델: OrderItem
public class OrderItem {
    private String productName;
    private double price;
    private int quantity;

    // 생성자
    public OrderItem(String productName, double price, int quantity) {
        this.productName = productName;
        this.price = price;
        this.quantity = quantity;
    }

    public double getPrice() {
        return price;
    }

    public int getQuantity() {
        return quantity;
    }
}

```

```java
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;

@Service
public class OrderService {
    @Transactional
    public double createOrder(List<OrderItem> items, double discount) {
        // 도메인 모델 생성
        Order order = new Order(items, discount);

        // 비즈니스 로직 수행
        double totalPrice = order.calculateTotalPrice();
        if (totalPrice < 50.0) { // 50달러 미만이면 배송비 추가
            order.applyShippingFee(10.0);
        }

        // 최종 총 금액 계산
        double finalPrice = order.calculateTotalPrice();
        System.out.println("총 주문 금액: $" + finalPrice);
        return finalPrice;
    }
}

```

### 2. **트랜잭션 스크립트 패턴  예제**

```java
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;

@Service
public class OrderService {
    @Transactional
    public double createOrder(List<OrderItem> items, double discount) {
        // 총 금액 계산
        double total = items.stream()
            .mapToDouble(item -> item.getPrice() * item.getQuantity())
            .sum();

        // 할인 적용
        total -= discount;

        // 배송비 추가 조건 처리
        if (total < 50.0) { // 50달러 미만이면 배송비 추가
            total += 10.0;
        }

        System.out.println("총 주문 금액: $" + total);
        return total;
    }
}

```

### 코드 예제

---

---

### **두 패턴의 차이점 정리**

| **도메인 모델 패턴** | **트랜잭션 스크립트 패턴** |
| --- | --- |
| 객체(`Order`, `OrderItem`)에 비즈니스 로직을 포함. | 비즈니스 로직을 별도의 서비스 계층에서 처리. |
| 복잡한 비즈니스 로직에 적합. | 단순한 비즈니스 로직에 적합. |
| 코드 재사용성이 높고 유지보수에 유리. | 구현이 간단하고 빠름. |
| 데이터와 로직이 결합. | 데이터와 로직이 분리됨. |

---

### 선택 기준

- **도메인 모델 패턴**: 복잡한 비즈니스 로직, 객체 지향 설계가 필요한 경우.
- **트랜잭션 스크립트 패턴**: 간단한 트랜잭션 기반 로직 처리, 빠른 개발이 필요한 경우.

# 엔티티 적용(도메인 모델 패턴)

## orderEntity

```java
import jakarta.persistence.*;
import java.util.ArrayList;
import java.util.List;

// Order 엔티티
@Entity
public class OrderEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true)
    private List<OrderItemEntity> items = new ArrayList<>();

    private double discount;

    public Long getId() {
        return id;
    }

    public List<OrderItemEntity> getItems() {
        return items;
    }

    public void addItem(OrderItemEntity item) {
        items.add(item);
    }

    public double getDiscount() {
        return discount;
    }

    public void setDiscount(double discount) {
        this.discount = discount;
    }
}

// OrderItem 엔티티
@Entity
public class OrderItemEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String productName;
    private double price;
    private int quantity;

    public OrderItemEntity() {}

    public OrderItemEntity(String productName, double price, int quantity) {
        this.productName = productName;
        this.price = price;
        this.quantity = quantity;
    }

    public double getPrice() {
        return price;
    }

    public int getQuantity() {
        return quantity;
    }
}

```

## Order

```java
import java.util.List;

public class Order {
    private List<OrderItem> items;
    private double discount;

    // 생성자
    public Order(List<OrderItem> items, double discount) {
        this.items = items;
        this.discount = discount;
    }

    // 총 주문 금액 계산
    public double calculateTotalPrice() {
        double total = 0.0;
        for (OrderItem item : items) {
            total += item.getPrice() * item.getQuantity();
        }
        return total - discount;
    }

    // 할인 적용
    public void applyDiscount(double discount) {
        this.discount = discount;
    }
}

 public OrderEntity toEntity() {
        OrderEntity orderEntity = new OrderEntity();
        orderEntity.setDiscount(this.discount);
        List<OrderItemEntity> itemEntities = items.stream()
            .map(item -> new OrderItemEntity(item.getProductName(), item.getPrice(), item.getQuantity()))
            .collect(Collectors.toList());
        itemEntities.forEach(orderEntity::addItem);
        return orderEntity;
    }

// 도메인 모델: OrderItem
public class OrderItem {
    private String productName;
    private double price;
    private int quantity;

    public OrderItem(String productName, double price, int quantity) {
        this.productName = productName;
        this.price = price;
        this.quantity = quantity;
    }

    public double getPrice() {
        return price;
    }

    public int getQuantity() {
        return quantity;
    }
}

```

## service

```java
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class OrderService {
    private final OrderRepository orderRepository;

    public OrderService(OrderRepository orderRepository) {
        this.orderRepository = orderRepository;
    }

    // 주문 생성
    @Transactional
    public Long createOrder(List<OrderItem> domainItems, double discount) {
        // 도메인 모델에서 로직 처리
        Order order = new Order(domainItems, discount);
        double totalPrice = order.calculateTotalPrice();
        System.out.println("총 주문 금액: " + totalPrice);

        // 엔티티로 변환
        OrderEntity orderEntity = order.toEntity();

        // 데이터베이스에 저장
        orderRepository.save(orderEntity);
        return orderEntity.getId();
    }

    // 주문 조회
    public Order getOrder(Long orderId) {
        // 엔티티 조회
        OrderEntity orderEntity = orderRepository.findById(orderId).orElseThrow(() -> new RuntimeException("Order not found"));

        // 도메인 모델로 변환
        List<OrderItem> domainItems = orderEntity.getItems().stream()
            .map(item -> new OrderItem(item.getProductName(), item.getPrice(), item.getQuantity()))
            .collect(Collectors.toList());

        return new Order(domainItems, orderEntity.getDiscount());
    }
}

```

# 추천영상

https://www.youtube.com/watch?v=dJ5C4qRqAgA      //객체지향
https://www.youtube.com/watch?v=zMAX7g6rO_Y      //쿼리 dsl